// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://oqzpkqbmcnpxpegshlcm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9xenBrcWJtY25weHBlZ3NobGNtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkxNDY5MzcsImV4cCI6MjA2NDcyMjkzN30.Wla6j2fBOnPd0DbNmVIdhZKfkTp09d9sE8NOULcRsQk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Cliente principal com localStorage (padr√£o para "manter conectado")
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: {
      getItem: (key: string) => {
        // Verificar se deve usar sessionStorage ou localStorage
        const useSessionOnly = sessionStorage.getItem('use-session-only') === 'true';
        return useSessionOnly ? sessionStorage.getItem(key) : localStorage.getItem(key);
      },
      setItem: (key: string, value: string) => {
        const useSessionOnly = sessionStorage.getItem('use-session-only') === 'true';
        if (useSessionOnly) {
          sessionStorage.setItem(key, value);
          // Limpar do localStorage se existir
          localStorage.removeItem(key);
        } else {
          localStorage.setItem(key, value);
          // Limpar do sessionStorage se existir
          sessionStorage.removeItem(key);
        }
      },
      removeItem: (key: string) => {
        localStorage.removeItem(key);
        sessionStorage.removeItem(key);
      },
    }
  }
});